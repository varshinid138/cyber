 So, this is about, I have given you example of the motto, right? So, these and some of the other APIs are there. What these APIs does, they allow clients to communicate with the server. How you can check this? Whatever you request to that web application, it will fetch the data through API only. There are a set of rules we define for the communication between the two. What are these set of rules? These set of rules, nothing but protocols only. There are some protocols which will be there, which we will follow. Something, you can take the example of HTTP only. The message if you can get some of the websites or web pages. Similarly, the API also fetch by using some of the protocols. Then we have some of the attacks and vulnerabilities. Whatever the attacks and vulnerabilities there in web application, similar things will be there in API also. Like attacking access control, getting what hackers saw, these attackers, what they do, they get the access of admin, administering privileges. Attacking authorization, lack of encryption. If you want to make sure your web application is secure, what you need to do? You need to use SSL and TLS encryption. So make sure the data is secure. And insufficiently hard and means I have explained you using default account and password. So you need to make sure it's not been said to any default user name. What mean user name password? It's hard to be some strong password unit. You need to give so that it not be going to be able to these attackers. So apart from that, we have some of the countermeasures. I have explained you using TLS encryption, then access control, giving only not making sure that only admin has the privileges not all the other users. Then white listing, white listing is nothing but suppose this is a web application. And here you have some of the customers or clients who access this particular website or web application. White listing means you are giving access to only these number of clients. Suppose there are 10 or suppose there are 100. You're white listing these people. So only these can access this particular website or application. So this is the concept of white listing. Why are we using white listing? Because no other attacker or other outside person can be able to access this web application. So that we can use as countermeasure. Limit request and body size and rate limiting means same similar thing only. Like suppose this is client. What he does? He send let's take a new page on. So this is client. What he does? He sends some request HTTP request to access to sub-app server. Right. To get the response and our web page will be displayed here. So rate limiting or limiting means how many request one client can send. You can set that limit in the web server. So why we are doing this? Rate limiting. Yes, that's exactly right. To prevent. Dawson. These did us attack. See if we don't put this rate limiting thing. What happens? Single client can send hundreds and thousands of requests and he can. He can crash that particular website. So in order to prevent that, we need to. Put these things like rate limiting and limit request to that particular web application or website. Secure coding is nothing but for web developer. Only I have explained to you. 40p if you remember multifactor operation. All these things will be put inside the web application source code so that a web application should be secure enough from the we can from the attackers. So these are some of the countermeasures. And we have something called web hooks. I'll explain you that. See, suppose let's take an example of your smartphone only. Suppose your friend will message you to your mobile phone. What do you do? You will keep on checking. He'll tell he told you that he'll go on a message today. So what do you do? You keep on checking your phone whether he has message or not that. That process is called as polling here. A client or user what he does. He keeps on checking or requesting the server whether there are some changes in the web application or not or else keep on checking. So this process is called as polling. And apart from that we have something called open connection. Open connection is nothing but what you do. You take the phone and you keep on staring the phone whether any of new updates or whether he has texted you or not. Same thing has the concept of open connection only. So in order to prevent this polling and open connection what we did, we introduced something called web hooks. See these web hooks are nothing but some kind of call back functions. And this will activate when some event occurs. Let's take example of these notifications only. Whatever like suppose in Facebook if someone has commented you or someone has message you will get that notification in your phone. So how you are getting this notification? See okay. Something has happened. Some event has happened here. Like someone has message you. They all these things will be happened automatically. Whenever some event happened what this web book does it will send some request to this web server and this server will initiate the request and it will send some details on data to this client. So this is the concept of web book. See HTTP based call back function allows communication between two APIs not only client and server in between two APIs also you can use. Suppose you want to get the weather data of some other region. What do you do? You use some weather API and fetch the details from that particular region. So here how web hooks is done? Here you can modify the code in such manner. If the temperature reaches to this temperature what the web book will do? It will fetch the data from server to our mobile phone in the power of notification. So that's why here we are not requesting from client to server here. The server is initiating the request or sending the data. So that is why the word reverse of push API that we can call this as reverse or push API. So this is even driven and server initiates the unique connection to whatever the call back address is there or call back function initiates the request. So it will server will send that data to the client. So these are the things that we happen in the web book. Then we have something called web shells similar to web book. What happens here? Attacker, he injects some malicious code to some website and it will be in turn sent to some web server. And with the help of this web shell program or web shell code, he can create a back door here. And he can able to fetch some of the data from web server home. So this is the concept of web shell. Back door allowing shell access using HTTP transport protocol and also often graphic interface for unfettered access. See, not only this attacker can do this system of web shell was given was used by some of the admin administrators. Suppose you have your admin or creator of that particular website. What you can do, you can use this web shell code to access some of the things no web server. So most of the things, what if I have a attacker use the same thing, he can able to access that through this back door as a what he is doing here is inserting this malicious code in the website. And the request will be sent from that web application or website for this web server and he has created a back door to access some of the data from web server. So this is the concept of web shell. Then at last we have some of the control measures implementing secure coding practices. This is for web app developer only then patch management if you remember from your previous module hacking web server, you can remember so many things are from patch management like a code, a code, a code function implementing default not implement. You should not use default password and all those things implementing proper security policies all those things come center patch management on and also keeping your software or data up to date. So all those things come center patch management as I have if you remember I have explained you something about lock files. So with the help of this lock files what you can do you can monitor all the locking and lockout activity and you can prevent the real time attack to the web application.