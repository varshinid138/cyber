 I will give you an example. You can remember this for cross-set scripting. Let's take an example of a car selling website. Suppose this is a car selling website. What happens here? So many acts will be there. Like a car image of the car and all the specification details of the car will be there. Suppose what happens? There is an attacker who also puts some description about any fake car, fake image of the car. And inside the description of the page, what he does? He'll input some script. Script or any, of course, JavaScript only. He'll input some malicious script there. And whenever he submit the data, it will look something like in the form of button for other users. When he submit these details in description and save this webpage, it will look something like this. Like, of course, image will be shown of the car and it will look like in order to inquire about this car, click on this button or click on contact button will be there. As soon as some person like suppose a John, when he clicks, when he visits this website and click on this button, what happens? Yeah, exactly. Code will be downloaded in the browser of John. And all the things, details of the, that are present in John's web browser like session ID cookies, everything will be sent to this attacker. So with that session ID, he attacker, what he does? He doesn't need any credentials, login credentials only. Without login credentials only, he can able to access all the, he can able to access John's account. From John's account, he can able to access every detail of the John, like his name, his phone number, his address and even his payment method if John has told his credit or debit card details. So these are the things. This is the typical example of cross set scripting. We have some of the web application attacks cross set scripting. I have explained you how it is done. We have something called parameter tampering that is nothing but changing this URL only. Suppose you have something like this like www.example.com. And what you can do, we can write. Suppose there is app slash get info. What if you can able to change this URL and privilege, get access of administrative rights? How you can do that? You can do that with the help of this. And just go get info something like that. What you are here, what we are doing, we are changing this URL. Basically, we are tampering this parameter to get access to some of the web pages. We suppose not to visit or we suppose not to see. Even not only this, you can take the any of the examples like www.somegoogle.com. Then we have something called category is equal to 1, 2, 5. And what we are supposed to visit this page and get the data whatever presenting this website. What we can able to change this number to some other number like 1, 2, 6, 4 or something like that. We can able to do the parameter tampering and get access to some of the data. Or even though we can also not only this, even we can able to extract, get into some of the other folders as well with the help of this. Suppose instead of category, let's put some image, image is equal to ID, some ID number. You can put and you can test the URL whether you can able to get access to that image or not. So these are the things that are being done in parameter tampering. The reveal edge escalation is nothing but you are logging into that web publication as a normal user. What happens if you can able to get the admin rights, you can able to access all the things in the data. You have seen that example in get or escalate your privilege to admin. Whatever the admin has rights to modify data, change the database, all those things you can do. Then we have something called insecure direct object reference. I can explain you with one example. Let's take example, Amazon only. From Amazon, you have ordered something from this website and Ingos has been generated. Right. So this invoice you can see with the help of this URL. Amazon.in slash invoice 1, 2, 5, 6 and what happens here modifying this number only you can able to check other people or other persons' invoices. So that is the example of insecure direct object references. That here means that only all the database that are being stolen the object of form now, JSON object that only that is object in the insecure direct object reference. SQL ingestion attack, I'll show you one example. These are nothing but SQL queries or payloads that you can copy paste and open some of these insecure websites. Something like take the example of this demo or one-able website, testfire.net here, you able to copy paste this SQL payload and click login. What will do? It will give access to the database. So this is how you can able to get access to database and check all these details that are present in the website.